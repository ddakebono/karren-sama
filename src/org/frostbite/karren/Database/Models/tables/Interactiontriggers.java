/**
 * This class is generated by jOOQ
 */
package org.frostbite.karren.Database.Models.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.frostbite.karren.Database.Models.Karrendb;
import org.frostbite.karren.Database.Models.Keys;
import org.frostbite.karren.Database.Models.tables.records.InteractiontriggersRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Interactiontriggers extends TableImpl<InteractiontriggersRecord> {

	private static final long serialVersionUID = -1949683033;

	/**
	 * The reference instance of <code>KarrenDB.InteractionTriggers</code>
	 */
	public static final Interactiontriggers INTERACTIONTRIGGERS = new Interactiontriggers();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<InteractiontriggersRecord> getRecordType() {
		return InteractiontriggersRecord.class;
	}

	/**
	 * The column <code>KarrenDB.InteractionTriggers.TriggerID</code>.
	 */
	public final TableField<InteractiontriggersRecord, Integer> TRIGGERID = createField("TriggerID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>KarrenDB.InteractionTriggers.Trigger</code>.
	 */
	public final TableField<InteractiontriggersRecord, String> TRIGGER = createField("Trigger", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>KarrenDB.InteractionTriggers.InteractionID</code>.
	 */
	public final TableField<InteractiontriggersRecord, Integer> INTERACTIONID = createField("InteractionID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>KarrenDB.InteractionTriggers</code> table reference
	 */
	public Interactiontriggers() {
		this("InteractionTriggers", null);
	}

	/**
	 * Create an aliased <code>KarrenDB.InteractionTriggers</code> table reference
	 */
	public Interactiontriggers(String alias) {
		this(alias, INTERACTIONTRIGGERS);
	}

	private Interactiontriggers(String alias, Table<InteractiontriggersRecord> aliased) {
		this(alias, aliased, null);
	}

	private Interactiontriggers(String alias, Table<InteractiontriggersRecord> aliased, Field<?>[] parameters) {
		super(alias, Karrendb.KARRENDB, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<InteractiontriggersRecord, Integer> getIdentity() {
		return Keys.IDENTITY_INTERACTIONTRIGGERS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<InteractiontriggersRecord> getPrimaryKey() {
		return Keys.KEY_INTERACTIONTRIGGERS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<InteractiontriggersRecord>> getKeys() {
		return Arrays.<UniqueKey<InteractiontriggersRecord>>asList(Keys.KEY_INTERACTIONTRIGGERS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<InteractiontriggersRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<InteractiontriggersRecord, ?>>asList(Keys.FK_INTERACTIONTRIGGERS_INTERACTION1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Interactiontriggers as(String alias) {
		return new Interactiontriggers(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Interactiontriggers rename(String name) {
		return new Interactiontriggers(name, null);
	}
}
